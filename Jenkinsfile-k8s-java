pipeline {

  agent {
    kubernetes {
      yamlFile 'kaniko-builder.yaml'
    }
  }
  environment {
        APP_NAME = "chainguard-demo-app"
        PROJECT_ID = 'presales-demos-430414'
        CLUSTER_NAME = 'se-demo-1'
        LOCATION = 'us-central1-c'
        CREDENTIALS_ID = 'gke-sa-demo'
        RELEASE = "1.0.0"
        DOCKER_USER = "bannimal"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        /* JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN") */

    }

  stages {

    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Build Application from SCM"){
      steps {
          git branch: 'chainguard-migration', credentialsId: 'github_pat', url: 'https://github.com/ericbannon/chainguard-ci-demo.git'
            }

        }

    stage('Build Image & Push with Kaniko') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh '''#!/busybox/sh
            /kaniko/executor  --dockerfile `pwd`/Dockerfile --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:latest
          '''
        }
      }
    }

    stage('Grype scan') {
      steps {
       grypeScan scanDest: 'registry:bannimal/chainguard-demo-app:latest', repName: 'myScanResult.txt', autoInstall:true
      }
    }

    stage('Deploy to Test Cluster in GKE') {
      steps {
          ('kubectl') {
          sh 'kubectl apply -f deployment.yaml'
       }
      }
    }

  } // end stages

post {
    always {
        recordIssues(
          tools: [grype()],
          aggregatingResults: true
        )
    }
  }
}