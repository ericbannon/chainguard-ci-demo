pipeline {

  agent {
    kubernetes {
      yamlFile 'kaniko-builder.yaml'
    }
  }
  environment {
        APP_NAME = "chainguard-demo-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "bannimal"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        /* JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN") */

    }

  stages {

    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Build Application from SCM"){
      steps {
          git branch: 'test', credentialsId: 'github_pat', url: 'https://github.com/ericbannon/chainguard-ci-demo.git'
            }

        }

    stage('Build Image & Push with Kaniko') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh '''#!/busybox/sh

            /kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:latest
          '''
        }
      }
    }

    stage('Analyze Image with grype') {
      steps {
        script {
          try {
            sh 'set -o pipefail ; /usr/local/bin/grype -f critical -q ${IMAGE_NAME}:${IMAGE_TAG}'
          } catch (err) {
            // if scan fails, clean up (delete the image) and fail the build
            sh """
              echo "No vulnerabilities detected in ${IMAGE_NAME}:${IMAGE_TAG}, cleaning up and proceeding with build."
              exit 0
            """
          } // end try/catch
        } // end script
      } // end steps
    } // end stage "analyze with grype"

    stage('Push stable image to Prod') {
      steps {
        container('kaniko'){
          sh "/kaniko/executor --cleanup && mkdir -p /workspace --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:prod
        }
      }
    }
  } // end stages
}